---
title: "How R works"
---

Most of us are familiar with Excel or used a software like SPSS, SAS, or STATA in school. Some of us use these regularly at work.

A programming environment, such as R, offers some cool stuff.

-   R is open-source and free. It has a huge support community that is constantly de-bugging and creating new functionalities.

-   If you find an analysis or cool example, the code is almost always included. The R community is all about sharing.

-   R was developed specifically for statistical programming.

-   If you can imagine an analytic task, you can implement it in R.

-   Analyses in R are transparent, easily shareable, and reproducible. Can you remember every step you did to create a data visualization in Excel so that someone else could add to it?

-   R integration with Github allows a team to work together.

-   R can read and write in virtually any data format.

-   R can be used for any data science task: scraping websites, developing websites, making static or interactive charts, automating repetitive tasks, statistical computations, querying databases, and many others.

-   R has a lot of inter-operability with other platforms.

To realize these benefits, however, requires an understanding of how R works. This chapter will walk through some foundations of using R and its data structures

## Basic use

In R, you create objects and then use those objects for your analysis. Objects are made up of whatever you assign them to. They can be a direct value, a file, a graphic, etc. Here's an example:

```{r}
a <- 5
```

We've assigned the object, `a`, the value of 5. The assignment operator `<-` is what tells R to assign the value of 5 to `a`. 

Now we can use the object `a`. As in `a + a.`

```{r}
a <- 5

# Add a + a (or 5 +5)
a+a
```

Notice that R understands to output the value of `a+a` without any additional instructions. Or, you could store the value of `a + a` as a new object.

```{r}
a <- 5

# Assign the value of a + a to b
b <- a + a

b

# b squared
b^2
```


## Data Structures

The primary data structures in R are vectors, matrices, lists, and data frames. They all basically begin as a vector. The idea here is not to master what the data structures are, but to understand how R handles each one as it will affect more advanced coding operations. Knowledge of data structures is also helpful when debugging code because error messages will reference the different data structures.

Naturally, we will start with the most "atomic" of the data structures, the (atomic) vector.

### Vectors

A vector is the most basic data structure in R. A vector can only contain a single data type. It can be any of logical, integer, double, character, complex or raw, but it cannot mix and match types.

Here's a vector

```{r}
vector <- 10
vector1 <- c(10, 14, 27, 99)
vector2 <- c("purple", "blue", "red")

vector
```

