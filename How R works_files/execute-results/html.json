{
  "hash": "09c90317d25d88495215c1e6bd79df70",
  "result": {
    "markdown": "---\ntitle: \"How R works\"\n---\n\n\n\n\nMost of us are familiar with Excel or used a software like SPSS, SAS, or STATA in school. Some of us use these regularly at work.\n\nA programming environment, such as R, offers some cool stuff.\n\n-   R is open-source and free. It has a huge support community that is constantly de-bugging and creating new functionalities.\n\n-   If you find an analysis or cool example, the code is almost always included. The R community is all about sharing.\n\n-   R was developed specifically for statistical programming.\n\n-   If you can imagine an analytic task, you can implement it in R.\n\n-   Analyses in R are transparent, easily shareable, and reproducible. Can you remember every step you did to create a data visualization in Excel so that someone else could add to it?\n\n-   R integration with Github allows a team to work together.\n\n-   R can read and write in virtually any data format.\n\n-   R can be used for any data science task: scraping websites, developing websites, making static or interactive charts, automating repetitive tasks, statistical computations, querying databases, and many others.\n\n-   R has a lot of inter-operability with other platforms.\n\nTo realize these benefits, however, requires an understanding of how R works. This chapter will walk through some foundations of using R and its data structures\n\n## Basic use\n\nIn R, you create objects and then use those objects for your analysis. Objects are made up of whatever you assign them to. They can be a direct value, a file, a graphic, etc. Here's an example:\n\n\n::: {.cell hash='How-R-works_cache/html/unnamed-chunk-1_5f687ec111f0dd2a69f92d58bb9b8e23'}\n\n```{.r .cell-code}\na <- 5\n```\n:::\n\n\nWe have assigned the object, `a`, the value of 5. The assignment operator `<-` is what tells R to assign the value of 5 to `a`.\n\nNow we can use the object `a`. As in `a + a.` We use the `#` to annotate our code for human readers. R will not compute any text to the right of a `#`. Annotating code is very helpful for code review and for remembering what you were doing when you open up a script that you have not worked on for 6 months.\n\n\n::: {.cell hash='How-R-works_cache/html/unnamed-chunk-2_a65f71508408a0e51ff6bef8489ae8ee'}\n\n```{.r .cell-code}\n# Assign a the value of 5\na <- 5\n\n# Add a + a (or 5 +5)\na+a\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10\n```\n:::\n:::\n\n\nNotice that R understands to output the value of `a+a` without any additional instructions. Or, you could store the value of `a + a` as a new object.\n\n\n::: {.cell hash='How-R-works_cache/html/unnamed-chunk-3_0261ae1f1e8f3f758f4aaf7aa5c76582'}\n\n```{.r .cell-code}\na <- 5\n\n# Assign the value of a + a to b\nb <- a + a\n\n#print value of b\nb\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10\n```\n:::\n:::\n\n\n## Data Structures\n\nThe primary data structures in R are vectors, matrices, lists, and data frames. They all basically begin as a vector. The idea here is not to master what the data structures are, but to understand how R handles each one as it will affect more advanced coding operations. Knowledge of data structures is also helpful when debugging code because error messages will reference the different data structures.\n\nNaturally, we will start with the most \"atomic\" of the data structures, the (atomic) vector.\n\n### Vectors\n\nA vector is the most basic data structure in R. A vector can only contain a single data type. It can be any of logical, integer, double, character, complex or raw, but it cannot mix and match types.\n\nHere's a vector\n\n\n::: {.cell hash='How-R-works_cache/html/unnamed-chunk-4_ee22dd9e4a2d7e152b61ed3c4aee8a62'}\n\n```{.r .cell-code}\n# Create vectors\nvector <- 10\nvector1 <- c(10, 14, 27, 99)\nvector2 <- c(\"purple\", \"blue\", \"red\")\n\n# Print the value of each vector \nvector\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10\n```\n:::\n\n```{.r .cell-code}\nvector1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10 14 27 99\n```\n:::\n\n```{.r .cell-code}\nvector2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"purple\" \"blue\"   \"red\"   \n```\n:::\n:::\n\n\n## Matrices\n\nA matrix is a vector with dimensions - it has rows and columns. As with a vector, the elements of a matrix must be of the same data type. Here are a few examples.\n\n\n::: {.cell hash='How-R-works_cache/html/unnamed-chunk-5_0970717f81ab3fa5980bc663a133cdce'}\n\n```{.r .cell-code}\n# Create a 2 x 2 matrix with the numbers 1 through 4\nm <- matrix(1:4, nrow = 2, ncol = 2) \n\n# Note that the matrix is filled column-wise. (e.g., it completes # the left column with 1 and 2 before moving to the right column \n# and entering 3 and 4 \nm\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n```\n:::\n:::\n\n\n## Lists\n\nA list is a vector that can have multiple data types. You can call `class()` on any object in R to display the type of object that it is.\n\n\n::: {.cell hash='How-R-works_cache/html/unnamed-chunk-6_8bb1728ac60543085ff9b99285d094eb'}\n\n```{.r .cell-code}\n# Make a list a\na <- list(10, \"red\", 74, \"blue\")\n\n# What is the class, or type, of a?\nclass(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"list\"\n```\n:::\n:::\n\n\n## Dataframes\n\nYou can think of a dataframe as your Excel Spreadheet. At MSI, this is the most common form of dataset. We read a .xlsx or .csv file into R, and we get a dataframe. At its core, a dataframe is a list of lists where each list (column) is the same length (i.e., it is a \"rectangular list\"). A data frame can contain many types of data because it is a collection of lists, and lists, as you remember, can consist of multiple data types.\n\n\n::: {.cell hash='How-R-works_cache/html/unnamed-chunk-7_ae7322d952e312c192edafa5b09bc8c2'}\n\n```{.r .cell-code}\n# Create a dataframe called df\n\ndf <- data.frame(a = c(10,20,30,40)\n                 , b = c('book', 'pen', 'textbook', 'pencil_case')\n                 , c = c(TRUE,FALSE,TRUE,FALSE)\n                 , d = c(TRUE,FALSE,TRUE,FALSE))\n\n# Print df\ndf\n```\n\n::: {.cell-output-display}\n```{=html}\n<table class=\"huxtable\" style=\"border-collapse: collapse; border: 0px; margin-bottom: 2em; margin-top: 2em; ; margin-left: auto; margin-right: auto;  \" id=\"tab:unnamed-chunk-7\">\n<col><col><col><col><tr>\n<th style=\"vertical-align: top; text-align: right; white-space: normal; border-style: solid solid solid solid; border-width: 0.4pt 0pt 0.4pt 0.4pt;    padding: 6pt 6pt 6pt 6pt; font-weight: bold;\">a</th><th style=\"vertical-align: top; text-align: left; white-space: normal; border-style: solid solid solid solid; border-width: 0.4pt 0pt 0.4pt 0pt;    padding: 6pt 6pt 6pt 6pt; font-weight: bold;\">b</th><th style=\"vertical-align: top; text-align: left; white-space: normal; border-style: solid solid solid solid; border-width: 0.4pt 0pt 0.4pt 0pt;    padding: 6pt 6pt 6pt 6pt; font-weight: bold;\">c</th><th style=\"vertical-align: top; text-align: left; white-space: normal; border-style: solid solid solid solid; border-width: 0.4pt 0.4pt 0.4pt 0pt;    padding: 6pt 6pt 6pt 6pt; font-weight: bold;\">d</th></tr>\n<tr>\n<td style=\"vertical-align: top; text-align: right; white-space: normal; border-style: solid solid solid solid; border-width: 0.4pt 0pt 0pt 0.4pt;    padding: 6pt 6pt 6pt 6pt; background-color: rgb(242, 242, 242); font-weight: normal;\">10</td><td style=\"vertical-align: top; text-align: left; white-space: normal; border-style: solid solid solid solid; border-width: 0.4pt 0pt 0pt 0pt;    padding: 6pt 6pt 6pt 6pt; background-color: rgb(242, 242, 242); font-weight: normal;\">book</td><td style=\"vertical-align: top; text-align: left; white-space: normal; border-style: solid solid solid solid; border-width: 0.4pt 0pt 0pt 0pt;    padding: 6pt 6pt 6pt 6pt; background-color: rgb(242, 242, 242); font-weight: normal;\">TRUE</td><td style=\"vertical-align: top; text-align: left; white-space: normal; border-style: solid solid solid solid; border-width: 0.4pt 0.4pt 0pt 0pt;    padding: 6pt 6pt 6pt 6pt; background-color: rgb(242, 242, 242); font-weight: normal;\">TRUE</td></tr>\n<tr>\n<td style=\"vertical-align: top; text-align: right; white-space: normal; border-style: solid solid solid solid; border-width: 0pt 0pt 0pt 0.4pt;    padding: 6pt 6pt 6pt 6pt; font-weight: normal;\">20</td><td style=\"vertical-align: top; text-align: left; white-space: normal; border-style: solid solid solid solid; border-width: 0pt 0pt 0pt 0pt;    padding: 6pt 6pt 6pt 6pt; font-weight: normal;\">pen</td><td style=\"vertical-align: top; text-align: left; white-space: normal; border-style: solid solid solid solid; border-width: 0pt 0pt 0pt 0pt;    padding: 6pt 6pt 6pt 6pt; font-weight: normal;\">FALSE</td><td style=\"vertical-align: top; text-align: left; white-space: normal; border-style: solid solid solid solid; border-width: 0pt 0.4pt 0pt 0pt;    padding: 6pt 6pt 6pt 6pt; font-weight: normal;\">FALSE</td></tr>\n<tr>\n<td style=\"vertical-align: top; text-align: right; white-space: normal; border-style: solid solid solid solid; border-width: 0pt 0pt 0pt 0.4pt;    padding: 6pt 6pt 6pt 6pt; background-color: rgb(242, 242, 242); font-weight: normal;\">30</td><td style=\"vertical-align: top; text-align: left; white-space: normal; border-style: solid solid solid solid; border-width: 0pt 0pt 0pt 0pt;    padding: 6pt 6pt 6pt 6pt; background-color: rgb(242, 242, 242); font-weight: normal;\">textbook</td><td style=\"vertical-align: top; text-align: left; white-space: normal; border-style: solid solid solid solid; border-width: 0pt 0pt 0pt 0pt;    padding: 6pt 6pt 6pt 6pt; background-color: rgb(242, 242, 242); font-weight: normal;\">TRUE</td><td style=\"vertical-align: top; text-align: left; white-space: normal; border-style: solid solid solid solid; border-width: 0pt 0.4pt 0pt 0pt;    padding: 6pt 6pt 6pt 6pt; background-color: rgb(242, 242, 242); font-weight: normal;\">TRUE</td></tr>\n<tr>\n<td style=\"vertical-align: top; text-align: right; white-space: normal; border-style: solid solid solid solid; border-width: 0pt 0pt 0.4pt 0.4pt;    padding: 6pt 6pt 6pt 6pt; font-weight: normal;\">40</td><td style=\"vertical-align: top; text-align: left; white-space: normal; border-style: solid solid solid solid; border-width: 0pt 0pt 0.4pt 0pt;    padding: 6pt 6pt 6pt 6pt; font-weight: normal;\">pencil_case</td><td style=\"vertical-align: top; text-align: left; white-space: normal; border-style: solid solid solid solid; border-width: 0pt 0pt 0.4pt 0pt;    padding: 6pt 6pt 6pt 6pt; font-weight: normal;\">FALSE</td><td style=\"vertical-align: top; text-align: left; white-space: normal; border-style: solid solid solid solid; border-width: 0pt 0.4pt 0.4pt 0pt;    padding: 6pt 6pt 6pt 6pt; font-weight: normal;\">FALSE</td></tr>\n</table>\n\n```\n:::\n:::\n\n\nNow that we have a dataframe, we want to look at some of its details using `glimpse()`.\n\n\n::: {.cell hash='How-R-works_cache/html/unnamed-chunk-8_9098c4ec1d0b20d32463531dc437668d'}\n\n```{.r .cell-code}\n# Create a dataframe called df\n\ndf <- data.frame(a = c(10,20,30,40)\n                 , b = c('book', 'pen', 'textbook', 'pencil_case')\n                 , c = c(TRUE,FALSE,TRUE,FALSE)\n                 , d = c(TRUE,FALSE,TRUE,FALSE))\n\n# Look at structure of df\ndplyr::glimpse(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 4\nColumns: 4\n$ a <dbl> 10, 20, 30, 40\n$ b <chr> \"book\", \"pen\", \"textbook\", \"pencil_case\"\n$ c <lgl> TRUE, FALSE, TRUE, FALSE\n$ d <lgl> TRUE, FALSE, TRUE, FALSE\n```\n:::\n:::\n\n\n## Factors\n\nFactors are numeric vectors that contain only pre-defined values (categories), and where each of these categories has a label.\n\n\n::: {.cell hash='How-R-works_cache/html/unnamed-chunk-9_df85642cc97c8e36509c9b92c5a6dfcd'}\n\n```{.r .cell-code}\na <- sample(1:2, 100, replace=T)\ntable(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\na\n 1  2 \n49 51 \n```\n:::\n:::\n\n::: {.cell hash='How-R-works_cache/html/unnamed-chunk-10_7acfcac220a325eb7043709bac57d936'}\n\n```{.r .cell-code}\na_f <- factor(a, labels=c(\"Male\",\"Female\"))\ntable(a_f)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\na_f\n  Male Female \n    49     51 \n```\n:::\n:::\n\n\nNote that the labels are just labels, the underlying representation is still 1 and 2.\n\n\n::: {.cell hash='How-R-works_cache/html/unnamed-chunk-11_4adb37410ffe96a9624251880a2ae98f'}\n\n```{.r .cell-code}\nstr(a_f)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n Factor w/ 2 levels \"Male\",\"Female\": 1 1 1 2 2 1 1 2 1 2 ...\n```\n:::\n:::\n\n\nFactors can sometimes cause trouble. More contemporary practice is to stick with an integer data type and add your own labels.\n\n\n::: {.cell hash='How-R-works_cache/html/unnamed-chunk-12_ce6e89e322abef640ff5b25e842cb5c1'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(sjmisc)\nlibrary(sjlabelled)\n\na_l <- a %>%\n  set_labels(labels=c(\"Male\",\"Female\"))\nstr(a_l)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n int [1:100] 1 1 1 2 2 1 1 2 1 2 ...\n - attr(*, \"labels\")= Named num [1:2] 1 2\n  ..- attr(*, \"names\")= chr [1:2] \"Male\" \"Female\"\n```\n:::\n:::\n\n::: {.cell hash='How-R-works_cache/html/unnamed-chunk-13_d862894fdf56e8f5cc287c15bd5de152'}\n\n```{.r .cell-code}\nfrq(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nx <integer> \n# total N=100 valid N=100 mean=1.51 sd=0.50\n\nValue |  N | Raw % | Valid % | Cum. %\n-------------------------------------\n    1 | 49 |    49 |      49 |     49\n    2 | 51 |    51 |      51 |    100\n <NA> |  0 |     0 |    <NA> |   <NA>\n```\n:::\n:::\n\n::: {.cell hash='How-R-works_cache/html/unnamed-chunk-14_1eea31314ef326da528170c264b42b1e'}\n\n```{.r .cell-code}\nfrq(a_f)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nx <categorical> \n# total N=100 valid N=100 mean=1.51 sd=0.50\n\nValue  |  N | Raw % | Valid % | Cum. %\n--------------------------------------\nMale   | 49 |    49 |      49 |     49\nFemale | 51 |    51 |      51 |    100\n<NA>   |  0 |     0 |    <NA> |   <NA>\n```\n:::\n:::\n\n::: {.cell hash='How-R-works_cache/html/unnamed-chunk-15_6fdf77598883fec18a8e689a9ab9e410'}\n\n```{.r .cell-code}\nfrq(a_l)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nx <integer> \n# total N=100 valid N=100 mean=1.51 sd=0.50\n\nValue |  Label |  N | Raw % | Valid % | Cum. %\n----------------------------------------------\n    1 |   Male | 49 |    49 |      49 |     49\n    2 | Female | 51 |    51 |      51 |    100\n <NA> |   <NA> |  0 |     0 |    <NA> |   <NA>\n```\n:::\n:::\n\n\nThe underlying integers behind factor labels have no ordering. To establish an ordering, make an ordered factor.\n\n\n::: {.cell hash='How-R-works_cache/html/unnamed-chunk-16_32897b97736e57411920f1cc07a9ded1'}\n\n```{.r .cell-code}\nord <- sample(1:5, 100, replace=T)\ntable(ord)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nord\n 1  2  3  4  5 \n23 18 20 21 18 \n```\n:::\n:::\n\n::: {.cell hash='How-R-works_cache/html/unnamed-chunk-17_c4ff8b8da9ea03be2e9282a39b9af803'}\n\n```{.r .cell-code}\nord.labs <- c(\"Not at all\",\"A little\",\"Somewhat\",\"Much\",\"Completely\")\nord.fac <- ordered(ord, labels=ord.labs)\ntable(ord.fac)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nord.fac\nNot at all   A little   Somewhat       Much Completely \n        23         18         20         21         18 \n```\n:::\n:::\n\n\nBut again, you have to be careful not to accidentally jumble the underlying integers with the ordered labels.\n\nTo keep things more explicit, I would still stick with an integer variable with labels, rather than an ordered factor.\n\n\n::: {.cell hash='How-R-works_cache/html/unnamed-chunk-18_c6c791797290c800b669fffff606aa60'}\n\n```{.r .cell-code}\nord.l <- ord %>%\n  set_labels(labels=ord.labs)\ntable(ord.l)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nord.l\n 1  2  3  4  5 \n23 18 20 21 18 \n```\n:::\n:::\n\n::: {.cell hash='How-R-works_cache/html/unnamed-chunk-19_b108fe4fa78359fbf9e7066749556ae2'}\n\n```{.r .cell-code}\nfrq(ord.l)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nx <integer> \n# total N=100 valid N=100 mean=2.93 sd=1.43\n\nValue |      Label |  N | Raw % | Valid % | Cum. %\n--------------------------------------------------\n    1 | Not at all | 23 |    23 |      23 |     23\n    2 |   A little | 18 |    18 |      18 |     41\n    3 |   Somewhat | 20 |    20 |      20 |     61\n    4 |       Much | 21 |    21 |      21 |     82\n    5 | Completely | 18 |    18 |      18 |    100\n <NA> |       <NA> |  0 |     0 |    <NA> |   <NA>\n```\n:::\n:::\n\n\nWhen you're ready to dive into this sometimes-frustrating subject, start here:\n\n-   [forcats](https://forcats.tidyverse.org/) package in the tidyverse\n-   [working with labelled data](https://cran.r-project.org/web/packages/sjlabelled/vignettes/labelleddata.html)\n-   [wrangling categorical data in R](https://peerj.com/preprints/3163/)\n\n## Sub-setting\n\nYou can cut up your objects into other objects. The base R way to do this is to use brackets.\n\n### sub-setting vectors\n\n\n::: {.cell hash='How-R-works_cache/html/unnamed-chunk-20_deb951a75d88af4043d058d488dd57b0'}\n\n```{.r .cell-code}\na <- rpois(5, 8)\na\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  5 12  7 11  9\n```\n:::\n:::\n\n::: {.cell hash='How-R-works_cache/html/unnamed-chunk-21_0985aa436bce0f2b9ed325bd8733418b'}\n\n```{.r .cell-code}\na[1:3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  5 12  7\n```\n:::\n:::\n\n::: {.cell hash='How-R-works_cache/html/unnamed-chunk-22_decf0464623b96437a570923ae0577a7'}\n\n```{.r .cell-code}\na[c(1,4,2)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  5 11 12\n```\n:::\n:::\n\n::: {.cell hash='How-R-works_cache/html/unnamed-chunk-23_99ae32e4c35db911a6313e36562bccc3'}\n\n```{.r .cell-code}\na[-2]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  5  7 11  9\n```\n:::\n:::\n\n::: {.cell hash='How-R-works_cache/html/unnamed-chunk-24_69ce1a4b9afb5ddc58864cf923ffa282'}\n\n```{.r .cell-code}\na[a>9]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 12 11\n```\n:::\n:::\n\n\n### sub-setting data frames\n\nSince data frames are two dimensional, you usually (but not always) need to specify both dimensions.\n\n\n::: {.cell hash='How-R-works_cache/html/unnamed-chunk-25_0a80bb12fcbaf0ae3253e8aacad65fc3'}\n\n```{.r .cell-code}\nstr(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t4 obs. of  4 variables:\n $ a: num  10 20 30 40\n $ b: chr  \"book\" \"pen\" \"textbook\" \"pencil_case\"\n $ c: logi  TRUE FALSE TRUE FALSE\n $ d: logi  TRUE FALSE TRUE FALSE\n```\n:::\n:::\n\n::: {.cell hash='How-R-works_cache/html/unnamed-chunk-26_7a1c0445117bc23d5c61b804c90bf91b'}\n\n```{.r .cell-code}\ndf_f <- df[1:5,2]\nstr(df_f)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n chr [1:5] \"book\" \"pen\" \"textbook\" \"pencil_case\" NA\n```\n:::\n:::\n\n\nThe comma within the bracket specifies rows and columns.\n\nMore contemporary practice uses what is referred to as the tidyverse.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}